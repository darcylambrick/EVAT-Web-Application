# -*- coding: utf-8 -*-
"""Untitled24.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Z1xRIVIKYlIVL4mxbzkwqYxENAlb0toi
"""

from pymongo import MongoClient
import json
import numpy as np
from sklearn.cluster import KMeans
from concurrent.futures import ThreadPoolExecutor
from functools import lru_cache
import overpy
import sys

# MongoDB connection
client = MongoClient("mongodb+srv://EVAT:EVAT123@cluster0.5axoq.mongodb.net/")
db = client['EVAT']  # Replace with your MongoDB database name
charging_stations_collection = db['charging_stations']  # Replace with your collection name
# print(charging_stations_collection)
# Function to get all stations data from MongoDB
def get_stations_data():
    stations = list(charging_stations_collection.find({}))
    # Convert MongoDB results to a list of dictionaries
    return stations

# Cache amenities queries to speed up repeated searches
@lru_cache(maxsize=1000)
def cached_amenities_query(lat, lon, radius=100):
    api = overpy.Overpass()
    query = f"""
    (
      node["amenity"](around:{radius},{lat},{lon});
      way["amenity"](around:{radius},{lat},{lon});
      relation["amenity"](around:{radius},{lat},{lon});
    );
    out center;
    """
    result = api.query(query)
    amenities_list = []

    for node in result.nodes:
        point = node.tags
        point["id"] = node.id
        point["lat"] = float(node.lat)
        point["lon"] = float(node.lon)
        amenities_list.append(point)

    for way in result.ways:
        point = way.tags
        point["id"] = way.id
        point["lat"] = float(way.center_lat)
        point["lon"] = float(way.center_lon)
        amenities_list.append(point)

    for rel in result.relations:
        point = rel.tags
        point["id"] = rel.id
        point["lat"] = float(rel.center_lat)
        point["lon"] = float(rel.center_lon)
        amenities_list.append(point)

    return amenities_list

# Function to get nearby amenities
def get_amenities(gps_coordinates, radius=100):
    """Retrieves amenities from OSM at a given radius from multiple GPS points"""
    amenities_list = []
    for coords in gps_coordinates:
        lat, lon = coords
        amenities = cached_amenities_query(lat, lon, radius)
        amenities_list.extend(amenities)

    return amenities_list

# Function to check for desired amenities near a station
def check_amenities_nearby(coords, desired_amenities, radius=100):
    amenities_nearby = get_amenities([coords], radius)
    amenities_found = {amenity['amenity'] for amenity in amenities_nearby}
    return all(amenity in amenities_found for amenity in desired_amenities)

# Function to cluster the charging stations
def cluster_stations(stations_data, n_clusters=25):
    # Extract the latitude and longitude for clustering
    coords = np.array([(station['latitude'], station['longitude']) for station in stations_data])

    # Initialize and fit KMeans
    kmeans = KMeans(n_clusters=n_clusters, random_state=42, n_init=10)
    labels = kmeans.fit_predict(coords)

    # Assign cluster labels back to the station data
    for i, station in enumerate(stations_data):
        station['cluster'] = int(labels[i])

    return stations_data, kmeans.cluster_centers_

# Function to find the closest N clusters
def find_nearest_clusters(user_location, cluster_centers, n_clusters_to_check=3):
    user_lat, user_lon = user_location
    distances = np.linalg.norm(cluster_centers - np.array([user_lat, user_lon]), axis=1)
    sorted_cluster_indices = np.argsort(distances)
    return sorted_cluster_indices[:n_clusters_to_check]

# Function to filter stations based on user preferences, including amenities
def filter_stations(stations_data, user_prefs):
    filtered_stations = []

    for station in stations_data:
        matches = True
        if 'ispayatlocation' in user_prefs:
            matches &= (station.get('pay_at_location', False) == user_prefs['ispayatlocation'])

        if 'chargertype' in user_prefs:
            matches &= (station.get('connection_type', '') == user_prefs['chargertype'])

        if 'power' in user_prefs:
            matches &= (station.get('power_output', 0) >= user_prefs['power'])

        if 'currenttype' in user_prefs:
            matches &= (station.get('current_type', '') == user_prefs['currenttype'])

        if 'numberofpoints' in user_prefs:
            matches &= (station.get('charging_points', 0) >= user_prefs['numberofpoints'])

        if 'amenities' in user_prefs:
            # Check amenities near the station using parallel processing
            coords = (station['latitude'], station['longitude'])
            matches &= check_amenities_nearby(coords, user_prefs['amenities'])

        if matches:
            filtered_stations.append(station)

    return filtered_stations

# Function to find the nearest station
def find_nearest_station(user_location, stations_data, user_prefs, cluster_centers):
    cluster_indices_to_check = find_nearest_clusters(user_location, cluster_centers)

    for cluster_idx in cluster_indices_to_check:
        # Filter stations within this cluster
        filtered_stations = [station for station in stations_data if station['cluster'] == cluster_idx]
        filtered_stations = filter_stations(filtered_stations, user_prefs)

        # If matches are found, proceed to find the nearest station
        if filtered_stations:
            # Calculate distances from user location to each station in the filtered list
            user_lat, user_lon = user_location
            station_coords = np.array([(station['latitude'], station['longitude']) for station in filtered_stations])
            distances = np.linalg.norm(station_coords - np.array([user_lat, user_lon]), axis=1)
            nearest_idx = np.argmin(distances)
            nearest_station = filtered_stations[nearest_idx]
            return nearest_station

    return None

# Function to return nearest station as JSON, converting ObjectId to string
def get_nearest_station_details(user_location, user_prefs):
    stations_data = get_stations_data()  # Retrieve data from MongoDB
    stations_data, cluster_centers = cluster_stations(stations_data, n_clusters=25)  # Cluster the stations
    nearest_station = find_nearest_station(user_location, stations_data, user_prefs, cluster_centers)  # Find nearest

    if nearest_station:
        # Convert ObjectId to string
        if '_id' in nearest_station:
            nearest_station['_id'] = str(nearest_station['_id'])

        # Convert nearest station details to JSON format
        nearest_station_json = json.dumps(nearest_station, indent=4)
        return nearest_station_json
    else:
        return json.dumps({"message": "No matching charging stations found."}, indent=4)
    

if __name__ == "__main__":
    # Example user preferences
    lat = float(sys.argv[1])
    lon = float(sys.argv[2])
    chargerType = sys.argv[3]

    # print(f"Get Nearest Stations")

    user_prefs = {
        'amenities': ['charging_station'],
    }
 
    # Example user location
    user_location = (lat, lon)  # Latitude and longitude of the user's location
 
    # Call the function to find the nearest station
    result_json = get_nearest_station_details(user_location, user_prefs)
    print(result_json)